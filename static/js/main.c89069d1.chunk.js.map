{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","index.js"],"names":["initialStateSearch","searchField","initialStateCats","isPending","cats","error","Card","props","className","alt","src","id","name","email","CardList","map","user","i","key","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","height","border","margin","padding","children","ErrorBoundary","state","hasError","this","class","Component","App","onRequestCats","filteredCats","filter","cat","toLowerCase","includes","onSearchChange","connect","searchCatsReducer","requestCatsReducer","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c89069d1.chunk.js","sourcesContent":["// REDUCERS: searchCatsReducer and requestCatsReducer;\n\nimport { \n    CHANGE_SEARCH_FIELD, REQUEST_CAT_PENDING,\n    REQUEST_CAT_SUCCESS, REQUEST_CAT_FAILED} from './constants.js';\n\n// Create an initial state/object.\nconst initialStateSearch = {\n    searchField: ''\n};\n\n// After initial state added, a reducer (pure function) is defined.\nexport const searchCatsReducer = (state= initialStateSearch, action={}) => {\n    // console.log(action.type);\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n};\n\n// Adding state and reducer function for requesting the Cats users;\nconst initialStateCats = {\n    isPending: false,\n    cats: [],\n    error: ''\n};\n\nexport const requestCatsReducer = (state= initialStateCats, action={}) => {\n    switch(action.type) {\n        case REQUEST_CAT_PENDING:\n            return Object.assign({}, state, {isPending: true});\n        case REQUEST_CAT_SUCCESS:\n            return Object.assign({}, state, {cats: action.payload, isPending: false});\n        case REQUEST_CAT_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false});\n        default:\n            return state;\n    }\n};","import React from 'react';\n\nconst Card = (props) => {\n\treturn (\n\t\t<div className= 'tc coolbackground dib br3 pa3 ma3 dim bw2 shadow-5 pointer'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${props.id}?size=300x300&set=set4`} />\n\t\t\t<div>\n\t\t\t\t<h2>{props.name}</h2>\n\t\t\t\t<p>{props.email}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ( { cats } ) => {\n\t// if (true) {\n\t// \tthrow new Error('Nooooooo!');\n\t// } Code used to test ErrorBoundary in development mode.\n\treturn (\n\t\t<div className= 'near-white'>\n\t\t\t{\n\t\t\t\tcats.map((user, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\t\tid={cats[i].id} \n\t\t\t\t\t\t\tname={cats[i].name} \n\t\t\t\t\t\t\tusername={cats[i].username} \n\t\t\t\t\t\t\temail={cats[i].email}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\n\nconst SearchBox = ( {searchChange} ) => {\n\treturn (\n\t\t<div className= 'pa2 mw-1'>\n\t\t\t<input \n\t\t\t\tclassName=\"pa3 ba  b--transparent coolbackground br2 near-white\" \n\t\t\t\ttype=\"search\" \n\t\t\t\tplaceholder='type name of cute kitty friend' \n\t\t\t\tonChange= {searchChange}\n\t\t\t/>\n\n\t\t</div>\n\t);\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', height: '500px', border: '2px solid white ', margin: '25px', padding: '15px'}} >\n\t\t\t{props.children}\n\t\t</div>\n\t)\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\n// declaring error boundary as a class component\n// it works as JavaScript catch {} block, but for components\nclass ErrorBoundary extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        };\n    }\n\n    // adding a lifecycle method to catch error thrown by a descendant component\n    // it receives as a parameter the thrown error and returns a value to update state.\n    static getDerivedStateFromError(error) {\n        //Update state so next render will show fallback UI, <h1>\n        return {hasError: true};\n    }\n\n    render() {\n        if (this.state.hasError) {\n            // We can render any custom fallback UI\n            return <h1 class=\"cooltitle\">Ooops, something went wrong. Sorry about that!</h1>\n        } else {\n            // if no error is thrown, it renders children component normally\n            return this.props.children;\n        }\n    }\n};\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux'; // importing connect method from react-redux\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\n// import { cats } from './lib/cats';\nimport '../index.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nimport { setSearchField, requestCats } from '../actions.js'; //importing the redux actions we have, because App.js is a smart component\n\n// mapStateToProps tells which state to listen to(from reducers.js) and send down as props;\n// searchField/cats/isPending/error are props in App component;\n// We access reducer from store that was created and passed down from index.js;\nconst mapStateToProps = state => {\n\treturn {\n\t\tsearchField: state.searchCatsReducer.searchField,\n\t\tcats: state.requestCatsReducer.cats,\n\t\tisPending: state.requestCatsReducer.isPending,\n\t\terror: state.requestCatsReducer.error\n\t}\n};\n\n// mapDispatchtoProps assign the props Actions(from actions.js) to listen to\n// and that should be dispatched;\nconst mapDispatchToProps = (dispatch) => {\n\t// we listen to the props action setSearchField/requestCats, \n\t// then we dispatch action to reducer to change state\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)), //listen to setSearchField action\n\t\tonRequestCats: () => dispatch(requestCats())  //listen to requestCats action\n\t}\n};\n\nclass App extends Component {\n\t// state is passed down form store as this.props;\n\t// We make an asynchronous request to an API, grabbing its users and\n\t// setting that state to robots(Cats);\n\tcomponentDidMount() {\n\t\tthis.props.onRequestCats(); // connecting this action;\n\t\t// console.log('componentDidMount');\n\t}\n\n\trender() {\n\t\tconst filteredCats = this.props.cats.filter(cat => {\n\t\t\treturn cat.name.toLowerCase().includes(this.props.searchField.toLowerCase());\n\t\t});\n\n\t\t// console.log('render');\n\t\tif (this.props.isPending) {\n\t\t\treturn <h1 className='cooltitle'>Loading...</h1>\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className='cooltitle'>Cute Cat Friends</h1>\n\t\t\t\t\t<SearchBox searchChange = {this.props.onSearchChange} />\n\t\t\t\t\t<Scroll>\t\t\n\t\t\t\t\t\t\t{/* wrapped CardList with Error Boundary component to catch errors  */}\n\t\t\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t\t\t<CardList cats = {filteredCats} />\n\t\t\t\t\t\t</ErrorBoundary>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div> \n\t\t\t);\n\t\t}\t\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// ACTIONS: setSearchField and requestCats;\n// We add here all Actions functions that will be dispatch to change \n// the state tree;\n\n// Importanting CHANGE_SEARCH_FIELD, and other constants;\nimport { \n    CHANGE_SEARCH_FIELD, REQUEST_CAT_PENDING,\n    REQUEST_CAT_SUCCESS, REQUEST_CAT_FAILED } from './constants.js';\n\n// create setSearchField Action which receives 'text' as input\n// (user input), returning an object with type(action type) and payload\n// (name keys);\nexport const setSearchField = (text) => ({\n    // console.log(text);\n    type: CHANGE_SEARCH_FIELD, // user input typing on search box     \n    payload: text     // type of data\n}); \n\n// Adding action for an API call, async call, to fetch users. Action requestCats will provide\n// the dispatch function to the second layer function; \nexport const requestCats = () => (dispatch) => {\n    dispatch( {type: REQUEST_CAT_PENDING} );// when action occurs, dispatch pending to reducer;\n    fetch('https://jsonplaceholder.typicode.com/users') // fetch users; \n\t\t.then(response => response.json()) // when it returns users response; will dispatch\n        .then(data => dispatch( {type:REQUEST_CAT_SUCCESS, payload: data} )) // either a success with a payload of users;\n        .catch(error => dispatch( {type:REQUEST_CAT_FAILED, payload: error} )) // or a payload of error;\n};","// creating a file with all of our constants for Redux implementation.\n\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_CAT_PENDING = 'REQUEST_CAT_PENDING'; // to be used for async request\nexport const REQUEST_CAT_SUCCESS = 'REQUEST_CAT_SUCCESS';\nexport const REQUEST_CAT_FAILED = 'REQUEST_CAT_FAILED';","import React from 'react';\nimport ReactDOM from 'react-dom';\n// Adding React Redux\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux'; //importing functions from redux; \nimport { searchCatsReducer, requestCatsReducer } from './reducers.js'; //imports reducer searchCats, then requestCatsReducer;\nimport logger from 'redux-logger'; //importing Logger function(middleware) with default options from redux-logger package\nimport thunk from 'redux-thunk'; //imports thunk middleware to handle async calls\nimport App from './containers/App';\n// CSS Toolkit\nimport 'tachyons';\n// object rootReducer that will contain all reducers;\nconst rootReducer = combineReducers( {searchCatsReducer, requestCatsReducer } )\n\n// applying middleware logger for development and testing;\n// thunk will be applied to handle async calls;\nconst store = \n    createStore(rootReducer,applyMiddleware(thunk,logger)); \n// we remove state from react app and keep it inside of this store;\n// we pass state down with store as a prop to App component;\n// we pass reducers to createStore function;\n\nReactDOM.render(\n    // Redux component Provider, passing store down to App.js smart component\n    <Provider store={store} >\n        <App />\n    </Provider>, document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}